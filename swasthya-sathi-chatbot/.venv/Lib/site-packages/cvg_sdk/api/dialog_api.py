"""
    VIER Cognitive Voice Dialog API

    CVG dialog history  # noqa: E501

    The version of the OpenAPI document: 1.24.4
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cvg_sdk.api_client import ApiClient, Endpoint as _Endpoint
from cvg_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cvg_sdk.model.custom import Custom
from cvg_sdk.model.dialog import Dialog
from cvg_sdk.model.dialog_data_parameters import DialogDataParameters
from cvg_sdk.model.entry_type import EntryType
from cvg_sdk.model.external_call_id import ExternalCallId


class DialogApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.attach_custom_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/dialog/{resellerToken}/{dialogId}/data',
                'operation_id': 'attach_custom_data',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reseller_token',
                    'dialog_id',
                    'dialog_data_parameters',
                ],
                'required': [
                    'reseller_token',
                    'dialog_id',
                    'dialog_data_parameters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reseller_token':
                        (str,),
                    'dialog_id':
                        (str,),
                    'dialog_data_parameters':
                        (DialogDataParameters,),
                },
                'attribute_map': {
                    'reseller_token': 'resellerToken',
                    'dialog_id': 'dialogId',
                },
                'location_map': {
                    'reseller_token': 'path',
                    'dialog_id': 'path',
                    'dialog_data_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_dialog_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/dialog/{resellerToken}/{dialogId}',
                'operation_id': 'delete_dialog',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'reseller_token',
                    'dialog_id',
                ],
                'required': [
                    'reseller_token',
                    'dialog_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reseller_token':
                        (str,),
                    'dialog_id':
                        (str,),
                },
                'attribute_map': {
                    'reseller_token': 'resellerToken',
                    'dialog_id': 'dialogId',
                },
                'location_map': {
                    'reseller_token': 'path',
                    'dialog_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_dialog_endpoint = _Endpoint(
            settings={
                'response_type': (Dialog,),
                'auth': [],
                'endpoint_path': '/dialog/{resellerToken}/{dialogId}',
                'operation_id': 'get_dialog',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'reseller_token',
                    'dialog_id',
                    'include_type',
                ],
                'required': [
                    'reseller_token',
                    'dialog_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reseller_token':
                        (str,),
                    'dialog_id':
                        (str,),
                    'include_type':
                        ([EntryType],),
                },
                'attribute_map': {
                    'reseller_token': 'resellerToken',
                    'dialog_id': 'dialogId',
                    'include_type': 'includeType',
                },
                'location_map': {
                    'reseller_token': 'path',
                    'dialog_id': 'path',
                    'include_type': 'query',
                },
                'collection_format_map': {
                    'include_type': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_dialog_by_external_call_id_endpoint = _Endpoint(
            settings={
                'response_type': (Dialog,),
                'auth': [],
                'endpoint_path': '/dialog/{resellerToken}/external/{projectToken}/{callId}',
                'operation_id': 'get_dialog_by_external_call_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'reseller_token',
                    'project_token',
                    'call_id',
                    'include_type',
                ],
                'required': [
                    'reseller_token',
                    'project_token',
                    'call_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'call_id',
                ]
            },
            root_map={
                'validations': {
                    ('call_id',): {
                        'max_length': 50,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reseller_token':
                        (str,),
                    'project_token':
                        (str,),
                    'call_id':
                        (ExternalCallId,),
                    'include_type':
                        ([EntryType],),
                },
                'attribute_map': {
                    'reseller_token': 'resellerToken',
                    'project_token': 'projectToken',
                    'call_id': 'callId',
                    'include_type': 'includeType',
                },
                'location_map': {
                    'reseller_token': 'path',
                    'project_token': 'path',
                    'call_id': 'path',
                    'include_type': 'query',
                },
                'collection_format_map': {
                    'include_type': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_single_entry_endpoint = _Endpoint(
            settings={
                'response_type': (Custom,),
                'auth': [],
                'endpoint_path': '/dialog/{resellerToken}/{dialogId}/custom/{key}',
                'operation_id': 'get_single_entry',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'reseller_token',
                    'dialog_id',
                    'key',
                ],
                'required': [
                    'reseller_token',
                    'dialog_id',
                    'key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reseller_token':
                        (str,),
                    'dialog_id':
                        (str,),
                    'key':
                        (str,),
                },
                'attribute_map': {
                    'reseller_token': 'resellerToken',
                    'dialog_id': 'dialogId',
                    'key': 'key',
                },
                'location_map': {
                    'reseller_token': 'path',
                    'dialog_id': 'path',
                    'key': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def attach_custom_data(
        self,
        reseller_token,
        dialog_id,
        dialog_data_parameters,
        **kwargs
    ):
        """Attach custom data to a dialog  # noqa: E501

        Attach custom data to a dialog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attach_custom_data(reseller_token, dialog_id, dialog_data_parameters, async_req=True)
        >>> result = thread.get()

        Args:
            reseller_token (str):
            dialog_id (str):
            dialog_data_parameters (DialogDataParameters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['reseller_token'] = \
            reseller_token
        kwargs['dialog_id'] = \
            dialog_id
        kwargs['dialog_data_parameters'] = \
            dialog_data_parameters
        return self.attach_custom_data_endpoint.call_with_http_info(**kwargs)

    def delete_dialog(
        self,
        reseller_token,
        dialog_id,
        **kwargs
    ):
        """Delete dialog by dialog ID  # noqa: E501

        Delete data of a dialog by dialog ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dialog(reseller_token, dialog_id, async_req=True)
        >>> result = thread.get()

        Args:
            reseller_token (str):
            dialog_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['reseller_token'] = \
            reseller_token
        kwargs['dialog_id'] = \
            dialog_id
        return self.delete_dialog_endpoint.call_with_http_info(**kwargs)

    def get_dialog(
        self,
        reseller_token,
        dialog_id,
        **kwargs
    ):
        """Get dialog by dialog ID  # noqa: E501

        Get data of a dialog by dialog ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dialog(reseller_token, dialog_id, async_req=True)
        >>> result = thread.get()

        Args:
            reseller_token (str):
            dialog_id (str):

        Keyword Args:
            include_type ([EntryType]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Dialog
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['reseller_token'] = \
            reseller_token
        kwargs['dialog_id'] = \
            dialog_id
        return self.get_dialog_endpoint.call_with_http_info(**kwargs)

    def get_dialog_by_external_call_id(
        self,
        reseller_token,
        project_token,
        call_id,
        **kwargs
    ):
        """Get dialog by external call ID  # noqa: E501

        Get data of a dialog by external call ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dialog_by_external_call_id(reseller_token, project_token, call_id, async_req=True)
        >>> result = thread.get()

        Args:
            reseller_token (str):
            project_token (str):
            call_id (ExternalCallId):

        Keyword Args:
            include_type ([EntryType]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Dialog
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['reseller_token'] = \
            reseller_token
        kwargs['project_token'] = \
            project_token
        kwargs['call_id'] = \
            call_id
        return self.get_dialog_by_external_call_id_endpoint.call_with_http_info(**kwargs)

    def get_single_entry(
        self,
        reseller_token,
        dialog_id,
        key,
        **kwargs
    ):
        """Get a single custom dialog data entry  # noqa: E501

        Get a single custom dialog data entry. If the key exists more than once, only the newest entry will be returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_single_entry(reseller_token, dialog_id, key, async_req=True)
        >>> result = thread.get()

        Args:
            reseller_token (str):
            dialog_id (str):
            key (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Custom
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['reseller_token'] = \
            reseller_token
        kwargs['dialog_id'] = \
            dialog_id
        kwargs['key'] = \
            key
        return self.get_single_entry_endpoint.call_with_http_info(**kwargs)

